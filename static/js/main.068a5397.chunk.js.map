{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","description","imgUrl","imgSize","id","react_default","a","createElement","className","alt","src","CardList","_ref","robots","cardArray","map","user","i","Components_Card","key","email","Fragment","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","_super","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","Components_SearchBox","Components_Scroll","Components_CardList","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_Containers_App"],"mappings":"oPAuBeA,MAdf,SAAeC,GAAO,IACXC,EAAsCD,EAAtCC,KAAKC,EAAiCF,EAAjCE,YAAYC,EAAqBH,EAArBG,OAAOC,EAAcJ,EAAdI,QAAQC,EAAML,EAANK,GACvC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,0DACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAM,SAASC,IAAOR,EAASE,EAAKD,IACzCE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKP,GACLK,EAAAC,EAAAC,cAAA,SAAIN,MCMLU,MAlBf,SAAAC,GAA4B,IAARC,EAAQD,EAARC,OACVC,EAAYD,EAAOE,IAAI,SAACC,EAAKC,GAChC,OAAQZ,EAAAC,EAAAC,cAACW,EAAD,CACPC,IAAKN,EAAOI,GAAGb,GACfF,OAAU,wBACVE,GAAMS,EAAOI,GAAGb,GAChBD,QAAU,UACVH,KAAQa,EAAOI,GAAGjB,KAClBC,YAAeY,EAAOI,GAAGG,UAG7B,OACIf,EAAAC,EAAAC,cAAAF,EAAAC,EAAAe,SAAA,KACCP,ICJMQ,MAVf,SAAAV,GAA8CA,EAA1BW,YAA0B,IAAdC,EAAcZ,EAAdY,aAC5B,OACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,oCACbH,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,YCQxDI,MAVf,SAAgB7B,GAEZ,OACIM,EAAAC,EAAAC,cAAA,OAAKsB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEjC,EAAMkC,odC4CJC,0CAxCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAI,EAAAC,KAAAF,OAYJG,eAAiB,SAACC,GACdP,EAAKQ,SAAS,CAAEpB,YAAamB,EAAME,OAAOC,SAZ1CV,EAAKW,MAAQ,CACTjC,OAAQ,GACRU,YAAa,IAJPY,uDAOd,WAAmB,IAAAY,EAAAT,KACfU,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAC9B,OAAQuC,4BAS3C,WAAQ,IAAAC,EACyBf,KAAKQ,MAA3BjC,EADHwC,EACGxC,OAAOU,EADV8B,EACU9B,YACR+B,EAAiBzC,EAAO0C,OAAO,SAAAC,GACjC,OAAOA,EAAMxD,KAAKyD,cAAcC,SAASnC,EAAYkC,iBAGzD,OAAQ5C,EAAO8C,OAGPtD,EAAAC,EAAAC,cAAA,OAAKC,UAAY,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,MAAf,eACAH,EAAAC,EAAAC,cAACqD,EAAD,CAAWpC,aAAec,KAAKG,iBAC/BpC,EAAAC,EAAAC,cAACsD,EAAD,KACIxD,EAAAC,EAAAC,cAACuD,EAAD,CAAUjD,OAAQyC,MAN7BjD,EAAAC,EAAAC,cAAA,+BA3BKwD,aCCHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAnB,KAAAkB,EAAAE,KAAA,UAAqBpB,KAAK,SAAArC,GAAiD,IAA9C0D,EAA8C1D,EAA9C0D,OAAQC,EAAsC3D,EAAtC2D,OAAQC,EAA8B5D,EAA9B4D,OAAQC,EAAsB7D,EAAtB6D,OAAQC,EAAc9D,EAAd8D,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,YCEDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH1E,EAAAC,EAAAC,cAACF,EAAAC,EAAM0E,WAAP,KACE3E,EAAAC,EAAAC,cAAC0E,EAAD,QAOJjB","file":"static/js/main.068a5397.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\n\n\n\nconst randNum = (max) => {\n    return Math.floor(Math.random() * max);\n  }\n\nfunction Card (props) {\n    const {name,description,imgUrl,imgSize,id} = props;\n    return (\n        <div className = 'tc f0 bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt = 'robots' src = {imgUrl + id + imgSize}></img>\n            <div>\n                <h1>{name}</h1>\n                <p>{description}</p>\n            </div>\n        </div>\n        );\n\n}\n\nexport default Card;","import React from \"react\";\nimport Card from './Card';\n\n\nfunction CardList ({robots}){\n    const cardArray = robots.map((user,i) => {\n       return (<Card\n        key={robots[i].id} \n        imgUrl = {'https://robohash.org/'}\n        id = {robots[i].id} \n        imgSize = '200x300' \n        name = {robots[i].name} \n        description = {robots[i].email} />   \n       );\n    });\n    return(\n        <>\n        {cardArray}\n        </>\n    );\n}\n\nexport default CardList;","import React from 'react'\n\n\nfunction SearchBox({searchfield,searchChange}){\n    return(\n        <div className = 'pa3 ba b--green bg-lightest-blue'>\n            <input type='search' placeholder='search robots' onChange={searchChange}/>\n        </div>\n        \n    )\n\n}\n\nexport default SearchBox;","import React from 'react'\n\n\n\nfunction Scroll(props) {\n    // console.log(props)\n    return(\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    );\n}\n\n\nexport default Scroll;","import React, {Component}from 'react'\nimport CardList from '../Components/CardList'\nimport SearchBox from '../Components/SearchBox'\nimport './App.css'\nimport Scroll from '../Components/Scroll'\n\n// const state = {\n//     robots: robots,\n//     searchfield: ''\n// }\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n         .then(response => response.json())\n         .then(users => this.setState({robots: users}));\n        // this.setState({robots: robots});\n    }\n    onSearchChange = (event) =>{\n        this.setState({ searchfield: event.target.value })\n    }\n\n\n\n    render(){\n        const {robots,searchfield} = this.state;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n\n        return !robots.length ?\n             <h1>Loading...</h1> : \n            (\n                <div className = 'tc'>\n                    <h1 className ='f2'>Robofriends</h1>\n                    <SearchBox searchChange= {this.onSearchChange}/>\n                    <Scroll>\n                        <CardList robots={filteredRobots}/>\n                    </Scroll>\n                    \n                </div>\n            );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './Containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}